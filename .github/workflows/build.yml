name: Build and test

on:
  push:
    branches:
      - main
      - nightly
    paths-ignore:
      - ".github"
      - ".vscode"
  pull_request:
    paths-ignore:
      - ".github"
      - ".vscode"

jobs:
  build:
    env:
      TEST_TIMEOUT_MINUTES: 40
      FSAC_TEST_DEFAULT_TIMEOUT : 120000 #ms, individual test timeouts
      DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1 # needed to allow .NET RCs to participate in rollforward as expected.
      DOTNET_INSTALL_DIR: ".dotnet"
    timeout-minutes: 40 # we have a locking issue, so cap the runs at ~20m to account for varying build times, etc
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-13 # using 13 because it's a bigger machine, and latest is still pointing to 12
          - ubuntu-latest
        dotnet-version: ["8.0.x", "9.0.x"]
        use-transparent-compiler:
          - "TransparentCompiler"
          - "BackgroundCompiler"
        workspace-loader:
          - "WorkspaceLoader"
          # - "ProjectGraph" # this is disable because it just adds too much time to the build
        # these entries will mesh with the above combinations
        include:
          # latest 8.0
          - global-json-file: "global.json"
            dotnet-version: "8.0.x"
            include-prerelease: false
            label: "8.0"
            build_net9: false
            test_tfm: net8.0
          # latest 9.0
          - global-json-file: "global.json"
            dotnet-version: "9.0.x"
            include-prerelease: true
            label: "9.0"
            build_net9: true
            test_tfm: net9.0
      fail-fast: false # we have timing issues on some OS, so we want them all to run

    runs-on: ${{ matrix.os }}

    name: Build on ${{matrix.os}} for ${{ matrix.label }} ${{ matrix.workspace-loader }} ${{ matrix.use-transparent-compiler }}

    steps:
    - uses: actions/checkout@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: actions/checkout@v4
      if: ${{ github.event_name == 'push' }}

    # setup .NET per the repo global.json
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # setup .NET per test session
    - name: Setup .NET
      id : setup-dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    # remove global.json so that the env configuration takes precedence
    - name: Purge global.json
      run: rm global.json

    - name: Create global.json
      run: dotnet new globaljson --sdk-version '${{ steps.setup-dotnet.outputs.dotnet-version }}' --roll-forward latestMinor

    # let's make sure we're on the version we think we are.
    - name: Announce .NET version
      run: dotnet --info

    - name: Restore tools
      run: dotnet tool restore

    - name: Check format
      run: dotnet fantomas --check build.fsx src
      env:
        DOTNET_ROLL_FORWARD: LatestMajor
        DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1

    # Ensure the scaffolding code can still add items to the existing code.
#    - name: EnsureCanScaffoldCodeFix
#      run: dotnet fsi build.fsx -- -p EnsureCanScaffoldCodeFix

    - name: Run Build
      run: dotnet build -c Release
      env:
        BuildNet9: ${{ matrix.build_net9 }}

    - name: Run and report tests
      run: dotnet test -c Release -f ${{ matrix.test_tfm }} --no-restore --no-build  --logger "console;verbosity=normal" --logger GitHubActions /p:AltCover=true /p:AltCoverAssemblyExcludeFilter="System.Reactive|FSharp.Compiler.Service|Ionide.ProjInfo|FSharp.Analyzers|Analyzer|Humanizer|FSharp.Core|FSharp.DependencyManager" -- Expecto.fail-on-focused-tests=true --blame-hang --blame-hang-timeout 1m
      working-directory: test/FsAutoComplete.Tests.Lsp
      env:
        BuildNet9: ${{ matrix.build_net9 }}
        USE_TRANSPARENT_COMPILER: ${{ matrix.use-transparent-compiler }}
        USE_WORKSPACE_LOADER: ${{ matrix.workspace-loader }}

  analyze:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Restore tools
      run: dotnet tool restore

    - name: Run analyzers
      run: dotnet build -t:AnalyzeSolution -p:TargetFramework=net8.0

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: analysisreports
